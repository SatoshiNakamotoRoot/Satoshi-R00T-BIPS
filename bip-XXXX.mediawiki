<pre>
  BIP: ???
  Layer: Consensus (hard fork)
  Title: Logarithm of transaction fee limits block size
  Author: Simon Cavegn <random@gmx.ch>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX
  Status: Draft
  Type: Standards Track
  Created: 2019-03-28
</pre>

==Abstract==

Logarithm of transaction fee limits block size.

If a sender is willing to pay a large fee, then a transaction may be allowed in a block even if blocksize for lower fee-transactions is full. Yet the blocksize is limited harshly by a formula.

==Motivation==

# Keep block space small.
# Waste less with spam transactions.
# Auto balance Fees: Increase very low fees, Descrease very high fees.
# Allow larger size when sender pays a lot.
# Allow wallets to calculate/display how much average free block space there is for each fee price.
# Allow senders to have more control about how the fee/priority of their transaction will behave, especially in the case of increased adoption in the future.

==Specification==

Every transaction has to fit into the following block space:
    Input variable 'transactionFee':
      type: integer
      unit: Satoshi
    Input variable 'transactionSize':
      type: integer
      unit: bytes
    Output:
      type: integer
      unit: bytes
    Code:
      int Formula(int transactionFee, int transactionSize)
      {
        int feePerByte = transactionFee / transactionSize;
        if (feePerByte == 1) return 200000;
        return 41000 + 315653 * Log2(feePerByte);
      }
      int Log2(int value)
      {
        int i;
        for (i = 0; value > 1; i++)
        {
          value >>= 1;
        }
        return i;
      }

==Implementation==

# Sort transactions by (TransactionFee / TransactionSize) (integer division, lowest first)
# For each transaction starting from lowest FeeInSatoshiPerByte: Sum up the bytes of space used so far. Check if summed up bytes of space used so far is smaller or equal than the formula result.
# If this is valid for each transaction then the blocksize is valid.

==How the formula behaves==
The first part of the table shows how spam is reduced. The part where total sum of fees in a block is between 1btc and 50btc is probably the most realistic real limit of the block size. Block sizes above 4-5MB will probably never happen due to too high fees.
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller; table-layout: fixed;"
!Transaction fee in satoshi
!BasicTransaction (250bytes) fee in satoshi/byte
!Basic transaction fee in $ if btc would be 20000$
!Resulting block size limit for the transaction
!Estimated total sum of fees in the block
|-
|0 sat
|0 sat/byte
|0.00 $
|41000 byte
|0.000 btc
|-
|249 sat
|0 sat/byte
|0.05 $
|41000 byte
|0.000 btc
|-
|250 sat
|1 sat/byte
|0.05 $
|200000 byte
|0.002 btc
|-
|499 sat
|1 sat/byte
|0.10 $
|200000 byte
|0.004 btc
|-
|500 sat
|2 sat/byte
|0.10 $
|356653 byte
|0.007 btc
|-
|999 sat
|3 sat/byte
|0.20 $
|356653 byte
|0.014 btc
|-
|1000 sat
|4 sat/byte
|0.20 $
|672306 byte
|0.027 btc
|-
|1999 sat
|7 sat/byte
|0.40 $
|672306 byte
|0.054 btc
|-
|2000 sat
|8 sat/byte
|0.40 $
|987959 byte
|0.079 btc
|-
|3999 sat
|15 sat/byte
|0.80 $
|987959 byte
|0.158 btc
|-
|4000 sat
|16 sat/byte
|0.80 $
|1303612 byte
|0.209 btc
|-
|7999 sat
|31 sat/byte
|1.60 $
|1303612 byte
|0.417 btc
|-
|8000 sat
|32 sat/byte
|1.60 $
|1619265 byte
|0.518 btc
|-
|15999 sat
|63 sat/byte
|3.20 $
|1619265 byte
|1.036 btc
|-
|16000 sat
|64 sat/byte
|3.20 $
|1934918 byte
|1.238 btc
|-
|31999 sat
|127 sat/byte
|6.40 $
|1934918 byte
|2.477 btc
|-
|32000 sat
|128 sat/byte
|6.40 $
|2250571 byte
|2.881 btc
|-
|63999 sat
|255 sat/byte
|12.80 $
|2250571 byte
|5.761 btc
|-
|64000 sat
|256 sat/byte
|12.80 $
|2566224 byte
|6.570 btc
|-
|127999 sat
|511 sat/byte
|25.60 $
|2566224 byte
|13.139 btc
|-
|128000 sat
|512 sat/byte
|25.60 $
|2881877 byte
|14.755 btc
|-
|255999 sat
|1023 sat/byte
|51.20 $
|2881877 byte
|29.510 btc
|-
|256000 sat
|1024 sat/byte
|51.20 $
|3197530 byte
|32.743 btc
|-
|511999 sat
|2047 sat/byte
|102.40 $
|3197530 byte
|65.485 btc
|-
|512000 sat
|2048 sat/byte
|102.40 $
|3513183 byte
|71.950 btc
|-
|1023999 sat
|4095 sat/byte
|204.80 $
|3513183 byte
|143.900 btc
|-
|1024000 sat
|4096 sat/byte
|204.80 $
|3828836 byte
|156.829 btc
|-
|2047999 sat
|8191 sat/byte
|409.60 $
|3828836 byte
|313.658 btc
|-
|2048000 sat
|8192 sat/byte
|409.60 $
|4144489 byte
|339.517 btc
|-
|4095999 sat
|16383 sat/byte
|819.20 $
|4144489 byte
|679.033 btc
|-
|4096000 sat
|16384 sat/byte
|819.20 $
|4460142 byte
|730.750 btc
|-
|8191999 sat
|32767 sat/byte
|1638.40 $
|4460142 byte
|1461.499 btc
|-
|8192000 sat
|32768 sat/byte
|1638.40 $
|4775795 byte
|1564.933 btc
|-
|16383999 sat
|65535 sat/byte
|3276.80 $
|4775795 byte
|3129.865 btc
|-
|16384000 sat
|65536 sat/byte
|3276.80 $
|5091448 byte
|3336.731 btc
|-
|32767999 sat
|131071 sat/byte
|6553.60 $
|5091448 byte
|6673.463 btc
|-
|32768000 sat
|131072 sat/byte
|6553.60 $
|5407101 byte
|7087.195 btc
|-
|65535999 sat
|262143 sat/byte
|13107.20 $
|5407101 byte
|14174.391 btc
|-
|65536000 sat
|262144 sat/byte
|13107.20 $
|5722754 byte
|15001.856 btc
|-
|131071999 sat
|524287 sat/byte
|26214.40 $
|5722754 byte
|30003.712 btc
|-
|131072000 sat
|524288 sat/byte
|26214.40 $
|6038407 byte
|31658.643 btc
|-
|262143999 sat
|1048575 sat/byte
|52428.80 $
|6038407 byte
|63317.286 btc
|-
|262144000 sat
|1048576 sat/byte
|52428.80 $
|6354060 byte
|66627.148 btc
|-
|524287999 sat
|2097151 sat/byte
|104857.60 $
|6354060 byte
|133254.296 btc
|-
|524288000 sat
|2097152 sat/byte
|104857.60 $
|6669713 byte
|139874.020 btc
|-
|1048575999 sat
|4194303 sat/byte
|209715.20 $
|6669713 byte
|279748.039 btc
|-
|1048576000 sat
|4194304 sat/byte
|209715.20 $
|6985366 byte
|292987.486 btc
|-
|2097151999 sat
|8388607 sat/byte
|419430.40 $
|6985366 byte
|585974.971 btc
|-
|2097152000 sat
|8388608 sat/byte
|419430.40 $
|7301019 byte
|612453.864 btc
|-
|4194303999 sat
|16777215 sat/byte
|838860.80 $
|7301019 byte
|1224907.728 btc
|-
|4194304000 sat
|16777216 sat/byte
|838860.80 $
|7616672 byte
|1277865.513 btc
|-
|8388607999 sat
|33554431 sat/byte
|1677721.60 $
|7616672 byte
|2555731.027 btc
|-
|8388608000 sat
|33554432 sat/byte
|1677721.60 $
|7932325 byte
|2661646.598 btc
|-
|16777215999 sat
|67108863 sat/byte
|3355443.20 $
|7932325 byte
|5323293.196 btc
|-
|16777216000 sat
|67108864 sat/byte
|3355443.20 $
|8247978 byte
|5535124.339 btc
|-
|33554431999 sat
|134217727 sat/byte
|6710886.40 $
|8247978 byte
|11070248.677 btc
|-
|33554432000 sat
|134217728 sat/byte
|6710886.40 $
|8563631 byte
|11493910.963 btc
|}

==Backward compatibility==

Soft fork: If applied AND old hardcoded block size limit is kept.

Hard fork: If applied AND old hardcoded block size limit is removed. (We still need a hard block limit of 8MB. The formula would never allow an 8MB block because it would need about 5 million btc fees in one block to reach that size, which will not happen. Yet the 8MB hard limit is required because of consensus and to prevent 1TB block attacks.)

==Discussion==
===Comment===
Doesn't this break CPFP? I think to avoid that you'll need to rework
your proposed algorithm to treat chains of transactions as a group.
(And note that you could have multiple transactions in one block that
depend on the same "parent" transaction, also in the same block.)
====Answer====
Under the assumption that 41kb space for transaction with zero fee should be enough, it does not break CPFP: The miner can throw out other transactions to make space for all parent transactions he needs. Please note: The incentive for miners is not to have 41kb filled with zero fees. The incentive is to fill all space with highest possible fee per byte transactions. (if necessary we could change a constant in the formula to modify the space for zero fee transactions.)

===Comment===
Related ideas:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013885.html

===Comment===
It seems the algorithm would greatly increase validation time. In particular, if the current limit is removed (as in hardforked proposal) then a 1Tb block can be used to attack the network, since sorting would require looking through the entire block. Thus, validation time would still limit the practical block sizes that can be deployed with this.
====Answer====
True in case of hardfork to remove the current limit we still need a limit of lets say 8 Mbyte. To achive a valid 8MB block with this formula, the block would need to contain about 8 million btc fees. This will never happen. So probably a hard limit of 8MB would be good for this formula. Also sorting could be implemented very fast because there are only 28 sorting-buckets before 8MB limit is reached.

==History==
Consensus might be at risk by rounding differences in the double type in varous environments. Therefore changed spec from double to integer division and integer logarithm.
