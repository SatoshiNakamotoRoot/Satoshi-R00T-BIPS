<pre>
  BIP: XXXX
  Layer: Applications
  Title: Decentralized Web of Trust
  Author: Christopher Gilliard <christopher.gilliard@gmail.com>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX
  Status: Draft
  Type: Standards Track
  Created: 2021-04-23
</pre>

==Abstract==

This BIP describes a layer two protocol for a decentralized web of trust using Bitcoin as the underlying cryptocurrency. This BIP is dependent on BIP-XXXX and BIP-XXXX.

==Motivation==

A Web of Trust is a system to establish the authenticity of the binding between a public key and its owner. It can also be extended to have trust types. These types may indicate social connections, business connections, financial connections, and many other types. It can have many applications in decentralized social media, financial, and other applications.

==Specification==

===General===

The general concept is that the decentralized notarization system may be used to establish a decentralized web of trust. Any user may create a document which specifies a trust relationship with any other user at any time. Relationships may be unidirectional, or bidirectional. We introduce a 4 byte type field to indicate different trust relationship types. TTL is also available. Onion addresses [<a href="#references">1</a>] will be used to identify users.

<img src="bip-XXXX/decentralized_web_of_trust.png">

In the above figure, each line represents a trust relationship. The lines with double arrows represent a bidirectional relationship and the single arrows represent a unidirectional relationship. Different colors represent different trust types. So, with this system, various types of relationships can be defined.

===Format of a trust registration document===

    <127 bytes standard header for documents>
    <1 byte version>
    <1 byte document type>
    <56 byte onion address of the trustor>
    <65 byte signature of a specified message>
    <56 byte onion address of the trustee>
    <4 bytes trust type>
    <4 bytes of TTL in seconds>

1.) 1 byte version = 0x01

2.) 1 byte document type = 0x03 indicating trust registration.

3.) The 56 byte onion address is the address of the trustor.

4.) The signature is the signature of a specified message to prove ownership of the private key associated with this onion address. The message will be the concatenation of the trustee onion address, the trust type, and the TTL for this trust relationship.

5.) Onion address of the trustee (address being trusted).

5.) The trust type is defined by the user. We will predefine several trust types in this document, but additional protocols may include different trust types as well:

    a.) 0 - social
    b.) 1 - financial
    c.) 2 - business
    d.) 3 - church/religious

Protocol developers are encouraged to define their own meanings and we will update this document based on those definitions as a standard emerges.

6.) TTL - Time to live. How long will this trust relationship last in seconds? 0 is indefinite length.

===Format of a trust revocation document===

    <127 bytes standard header for documents>
    <1 byte version>
    <1 byte document type>
    <56 byte onion address of the trustor>
    <65 byte signature of a specified message>
    <56 byte onion address of the trustee who's trust is being revoked>
    <4 bytes trust type being revoked>

1.) 1 byte version = 0x01

2.) 1 byte document type = 0x04 indicating trust revocation.

3.) The 56 byte onion address is the address of the trustor.

4.) Signature proving ownership of the trustor's private key.

5.) The 56 byte onion address of the trustee who's trust is being revoked.

6.) The trust type being revoked.

===Document Trust===

In addition to trusting other onion addresses, documents can also be trusted. The format for trusting a document is the same as trusting/revoking an onion address, except that the document type is 0x05 instead of 0x03 (document trust revocation is type 0x06 instead of 0x04) and the 56 byte onion address of the trustee is replaced with the 32 byte checksum of the document being trusted. This is an important capability that can be used for content filtering. This is one possible solution to the "content problem" as posed by Ross Ulbricht [<a href="#references">2</a>]. While Ulbricht's solution is the ZKANN, this filtering capability through use of web of trusts will be fairly simple to implement and may be a partial solution until the ZKANN concept can be further developed. The way it would work is that a filtering service could evaluate all documents that are notarized and based on their assessment, they can either trust or not trust those documents. Users may wish to view different filtering services web of trust and not view documents that contain untrusted content. This will create a free market for different services to filter content and users will select the most suitable ones. Content providers will likely try to make their content conform to as many of these filters as possible.

===Trust Servers===

Trust servers will download all notarizations that meet the specifications in BIP-XXXX from the blockchain and their associated tree documents from the decentralized storage system described in BIP-XXXX. Each document that is notarized is then checked to see if there are Trust documents in them. Syncing of a trust server may take some time, so once it is in sync it will continually listen to the blockchain and the other associated systems for updates to keep in sync. Individual users may run their own trust server, or more likely most will rely on third parties to run trust servers for them. In either case, the centralization of building the web of trust is removed because anyone can let the world know about a trust relationship by submitting a notarization record and anyone can run their own trust server without permission as well. Trust servers will allow searches for trust relationships and other capabilities like depth of relationships, etc.

==Summary==

The proposed system will allow trust relationships to be registered in a decentralized manner and use the blockchain's ordering to resolve any conflicts with respect to which trust relationships exist and at what time were they formed. It will eliminate centralized third parties from managing this data and put users back in control of their data.

==References==

[1] - https://en.wikipedia.org/wiki/.onion

[2] - https://medium.com/swlh/zkann-a-possible-solution-to-the-content-problem-6a4eec578b5b
