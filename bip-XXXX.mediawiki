<pre>
  BIP: ???
  Layer: Consensus (hard fork)
  Title: Logarithm of transaction fee limits block size
  Author: Simon Cavegn <random@gmx.ch>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX
  Status: Draft
  Type: Standards Track
  Created: 2019-03-28
</pre>

==Abstract==

Logarithm of transaction fee limits block size.

If a sender is willing to pay a large fee, then a transaction may be allowed in a block even if blocksize for lower fee-transactions is full. Yet the blocksize is limited harshly by a formula.

==Motivation==

# Keep block space small.
# Waste less with spam transactions.
# Auto balance Fees: Increase very low fees, Descrease very high fees.
# Allow larger size when sender pays a lot.
# Allow wallets to calculate/display how much average free block space there is for each fee price.
# Allow senders to have more control about how the fee/priority of their transaction will behave, especially in the case of increased adoption in the future.

==Specification==

Every transaction has to fit into the following block space:
    Input variable 'FeeInSatoshiPerByte': Must be positive or 0
      type: double
      unit: Satishi per byte
    Output:
      type: uint
      unit: bytes
    Formula:
      floor( log10( 1.1 + FeeInSatoshiPerByte ) * 1024 * 1024 )

==Implementation==

# Sort transactions by FeeInSatoshiPerByte (lowest first)
# For each transaction starting from lowest FeeInSatoshiPerByte: Sum up the bytes of space used so far. Check if summed up bytes of space used so far is smaller or equal than the formula result.
# If this is valid for each transaction then the blocksize is valid.

==How the formula behaves==

{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller; table-layout: fixed;"
!Transaction fee
!Resulting block size limit for the transaction (use formula for exact value)
!Estimated basic transaction fee
!Estimated basic transaction fee in $ if btc would be 4000$
!Estimated total sum of fees in the block
|-
| 0 satoshi/byte
| about 41kb
| 0
| 0
| 0
|- 
| 1 satoshi/byte 
| about 322kb
| 250 sat
| 0.01 $
| 0.00322 btc
|-
| 10 satoshi/byte 
| about 1Mb
| 2500 sat
| 0.1 $
| 0.1 btc
|- 
| 100 satoshi/byte 
| about 2Mb
| 25000 sat
| 1 $
| 2 btc
|- 
| 1k satoshi/byte 
| about 3Mb
| 250000 sat
| 10 $
| 30 btc
|- 
| 10k satoshi/byte 
| about 4Mb
| 2500000 sat
| 100 $
| 400 btc
|- 
| 100k satoshi/byte 
| about 5Mb
| 25000000 sat
| 1000 $
| 5000 btc
|}

==Backward compatibility==

Soft fork: If applied AND old hardcoded block size limit is kept.

Hard fork: If applied AND old hardcoded block size limit is removed. (We still need a hard block limit of 8MB. The formula would never allow an 8MB block because it would need about 8 million btc fees in one block to reach that size, which will not happen. Yet the 8MB hard limit is required because of consensus and to prevent 1TB block attacks.)

==Discussion==
===Comment===
Doesn't this break CPFP? I think to avoid that you'll need to rework
your proposed algorithm to treat chains of transactions as a group.
(And note that you could have multiple transactions in one block that
depend on the same "parent" transaction, also in the same block.)
====Answer====
Under the assumption that 41kb space for transaction with zero fee should be enough, it does not break CPFP: The miner can throw out other transactions to make space for all parent transactions he needs. Please note: The incentive for miners is not to have 41kb filled with zero fees. The incentive is to fill all space with highest possible fee per byte transactions. (if necessary we could change the constant in the formula from 1.1 to 1.2 that would modify the space for zero fee transactions to 79kb)

===Comment===
Related ideas:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013885.html

===Comment===
It seems the algorithm would greatly increase validation time. In particular, if the current limit is removed (as in hardforked proposal) then a 1Tb block can be used to attack the network, since sorting would require looking through the entire block. Thus, validation time would still limit the practical block sizes that can be deployed with this.
====Answer====
True in case of hardfork to remove the current limit we still need a limit of lets say 8 Mbyte. To achive a valid 8MB block with this formula, the block would need to contain about 8 million btc fees. This will never happen. So probably a hard limit of 8MB would be good for this formula.

