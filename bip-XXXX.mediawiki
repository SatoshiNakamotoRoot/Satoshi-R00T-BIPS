<pre>
  BIP: XXXX
  Layer: Applications
  Title: Notification Services
  Author: Christopher Gilliard <christopher.gilliard@gmail.com>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX
  Status: Draft
  Type: Standards Track
  Created: 2021-04-23
  License: BSD-2-Clause
</pre>

==Abstract==

This BIP describes a notification service using Bitcoin as the underlying cryptocurrency. This BIP is dependent on BIP-XXXX and BIP-XXXX.

==Motivation==

Previous BIPs describe decentralized storage, time-stamping, and naming, one of the other missing pieces for building real world applications is notifications. In the case of notifications, building a 100% decentralized system would be difficult. The reason is that when a user wants to notify other users, they need it to be fast and reliable, so they need to rely on the operator of the notification system. To avoid abuse of a centralized system, we propose an open standard which multiple operators can implement. Service providers will build a reputation over time and the goal is to give users options for affordable and reliable notification services. So in this BIP we propose a standard notification service for use with the other services described.

==Specification==

===General===

We only allow notification of an event which specifies a 32 byte document id and do not allow transmission of larger amounts of data. This document can have additional information about what happened. Transmission of larger amounts of data may be necessary for low latency communications like live streaming and that can be achieved by using a direct connection between the parties. The idea is that for most types of interactivity, notification of an event is good enough and the data can be downloaded from the decentralized storage mechanism after the notification occurs. Even for instant messaging, since it is generally desirable for the message to be persisted, using the decentralized storage mechanism makes sense. So, the notification system will only be used to notify another user that a message exists and that user must then download the message via the decentralized storage system.

===Notification Server===

The notification server, will listen for requests via TOR address. When a notification is to be sent, the notifier, will make a request to the notification server. The request will use the following format:

    <32 byte checksum of document published>
    <56 byte onion address of sender>
    <65 byte signature of checksum using the sender's onion address private key>
    <4 byte TTL in seconds or 0 for indefinite>
    <2 byte number of onion addresses to notify>
    <56 byte recipient onion address>
    <..>
    <2 byte number of names (which map to onion addresses) to notify>
    <2 byte name length>
    <variable length name>
    <..>


When a notification server receives a notification request, it will respond with an LN invoice and once paid, the notification server will notify the specified onion addresses [<a href="#references">1</a>]. In addition to the instant notifications, if that particular onion address was offline at the time of the notification, the owner of the onion address may make a request for notifications. This will typically be done on startup by applications to get notifications that were made while they were offline.

Before getting this update, the notification server will generate a challenge for the requester to prove they control the specified onion address.
The notification update request will use the following format:

    <56 byte onion address>
    <65 byte signature of challenge>
    <2 byte number of onion addresses to check notifications for>
    <56 byte onion address>
    <..>
    <2 byte number of names (which map to onion addresses) to check notifications for>
    <2 byte name length>
    <variable length name>
    <..>

Once all intended recipients receive the message, it can be deleted from the notification server. Notification servers may choose to federate with other notification servers such that if the end users use different notification servers, they will still receive the notifications.

===Notification Lists===

In addition to specifying a list of onion addresses, the notifier may specify a predefined list of onion addresses. The API will allow for creating and modifying these lists. These can be used for things like friend lists, groups, and followers.

===Multiple Notifications===

To make the requirements on the notification server a little less resource intensive, we only require that the notification server save the last notification made to any given address. Once any onion address sends a new notification, all previous notification data to that recipient address may be deleted. This makes it so that the data sent in the document that is part of the notification must include links back to any data required for previous notifications. You can think of these documents as being part of a feed of data. So they would be like a linked list with links back to previous messages. This reduces quite a bit of burden on the notification server. Forthcoming BIPs will outline a feed format that addresses this.

==Summary==

The proposed system will allow notifications to take place in our decentralized system and while there will be some degree of centralization with the notification servers, the open standards and federation will help control any issues that might arise.

==References==

[1] - https://en.wikipedia.org/wiki/.onion

